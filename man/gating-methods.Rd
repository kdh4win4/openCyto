% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{methods}
\name{gating}
\alias{gating}
\alias{gating,gatingTemplate,GatingSet-method}
\alias{gating,gatingTemplate,GatingSetList-method}
\title{Applies gatingTemplate to one GatingSet.}
\usage{
gating(x, y, ...)

\S4method{gating}{gatingTemplate,GatingSet}(x, y, env_fct = NULL, ...)

\S4method{gating}{gatingTemplate,GatingSetList}(x, y, env_fct = NULL, ...)
}
\arguments{
\item{x}{a \code{gatingTemplate} object}

\item{y}{a \code{GatingSet} object}

\item{...}{\itemize{
     \item{start}{ a \code{character} that specifies the population (correspoding to 'alias' column in csv template) where the gating prcoess will start from. It is useful to quickly skip some gates and go directly to the target population in the testing run. Default is "root".}
     \item{stop.at}{ a \code{character} that specifies the population (correspoding to 'alias' column in csv template) where the gating prcoess will stop at. Default is NULL, indicating the end of gating tree.}
     \item{mc.cores}{ passed to \code{multicore} package for parallel computing}
     \item{parallel_type}{  \code{character} specifying the parallel type. The valid options are "none", "multicore", "cluster".}
     \item{cl}{ \code{cluster} object passed to \code{parallel} package (when \code{parallel_type} is "cluster")}
 }}

\item{env_fct}{a \code{environment} that contains \code{fcTree} object named as 'fct'. If NULL (by default), no \code{fcTree} will be constructed. It is currently reserved for the internal debugging.}
}
\value{
Nothing. As the side effect, gates generated by gating methods are saved in \code{GatingSet}.
}
\description{
It loads the gating methods by topological order and applies them to \code{GatingSet}.
}
\examples{
\dontrun{
 gt <- gatingTemplate(file.path(path, "data/ICStemplate.csv"), "ICS")
 gs <- GatingSet(fs) #fs is a flowSet/ncdfFlowSet
 gating(gt, gs)
 gating(gt, gs, stop.at = "v") #proceed the gating until population 'v'
 gating(gt, gs, start = "v") # start from 'v'
 gating(gt, gs, parallel_type = "multicore", mc.cores = 8) #parallel gating using multicore
 #parallel gating by using cluster
 cl1 <- makeCluster (8, type = "MPI")
 gating(gt, gs, parallel_type = "cluster", cl = cl1)
 stopCluster ( cl1 )
}
}

